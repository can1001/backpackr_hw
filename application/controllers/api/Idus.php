<?php
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

class Idus extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        $idx = $this->get('idx');
        
        if ($idx === NULL)
        {
            $query = $this->db->get('member_list');
            $users = $query->result_array();
            // $query = $this->db->get('member_list', $pagelength, $offset);

            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }
        
        $idx = (int) $idx;

        // Validate the id.
        if ($idx <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        $query = $this->db->get_where('member_list', array('idx' => $idx));
        $users = $query->result_array();

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = NULL;
        
        if (!empty($users))
        {            
            foreach ($users as $key => $value)
            {
                if (isset($value['idx']) && $value['idx'] == $idx)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $data = array(
            // 'id' => 100, // Automatically generated by the model
            'email' => $this->post('email'),
            'password' => $this->post('password'),
            'name' => $this->post('name'),
            'affiliate' => $this->post('affiliate'),
            'phone' => $this->post('phone')
        );

        $this->db->insert('member_list', $data);

        $this->set_response($data, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    
    public function users_delete()
    {
        $idx = (int) $this->get('idx');

        // Validate the idx.
        if ($idx <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($idx);
        $this->db->delete('member_list', array('idx' => $idx));

        $message = array(
            'idx' => $idx,
            'message' => 'Deleted the resource'
        );
        
        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function users_put()
    {
        // update task
        $idx = $this->get('idx');

        $data = array(
            'name' => $this->put('name'),
            'affiliate' => $this->put('affiliate')
        );

        // var_dump($data, $idx);

        // print_r("users_put");


        $this->db->where('idx', $idx);
        $result = $this->db->update('member_list', $data);
                 
        if($result === FALSE){
            $this->response(array('status' => 'failed'));
        }else{
            $this->response(array('status' => 'success'));
        }
    }

}